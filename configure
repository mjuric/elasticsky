#!/usr/bin/env python
#
# Configure the ray cluster for B612's GCP environment
#

import argparse, os, sys, socket

parser = argparse.ArgumentParser(description='Configure the project')
parser.add_argument('--user', help=f'username for remote Ray connections (default: {os.environ["USER"]})', default=os.environ["USER"])
parser.add_argument('--workdir', help=f'working directory for Ray (default: {os.getcwd()})', default=os.getcwd())

args = parser.parse_args()

#
# compute the data
#
def resolve_to_ip(host):
    try:
        return socket.gethostbyname(host)
    except socket.gaierror as e:
        print(f"Error resolving {host}; make sure you have it defined in Cloud DNS and pointing to the IP reserved for your head node (ask Carise or Mario).")
        sys.exit(0)

externalIP = resolve_to_ip(f'{args.user}.dev.api.b612.ai')
internalIP = resolve_to_ip(f'{args.user}.int.api.b612.ai')

vars = {
    'user':       args.user,
    'workdir':    args.workdir,
    'externalIP': externalIP,
    'internalIP': internalIP
}

# Render the jinja template
from jinja2 import Template

with open('ray-cluster.yaml', 'w') as fp:
    fp.write("##\n##\n## AUTOGENERATED BY ./configure\n##\n##\n\n")
    fp.write(Template(open("scripts/gcp-ray.yaml.jinja2").read()).render(vars))

print("ray-cluster.yaml generated.")
print("\nConfiguration:")
for k, v in vars.items():
    print(f"    {k}: {v}")
print("\nYou may start it with `ray up ray-cluster.yaml`")
